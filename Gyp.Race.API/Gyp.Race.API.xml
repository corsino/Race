<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gyp.Race.API</name>
    </assembly>
    <members>
        <member name="T:Gyp.Race.API.ApiError">
            <summary>
            ApiError configure application Errors
            </summary>
        </member>
        <member name="M:Gyp.Race.API.ApiError.#ctor">
            <summary>
            ApiError Class constructor
            </summary>
        </member>
        <member name="M:Gyp.Race.API.ApiError.#ctor(System.Collections.Generic.IEnumerable{Flunt.Notifications.Notification},System.Nullable{Gyp.Race.Application.ErrorCode})">
            <summary>
            ApiError Class constructor
            </summary>
            <param name="errors">Hold all error notification in application</param>
            <param name="error">Hold error code</param>
        </member>
        <member name="P:Gyp.Race.API.ApiError.ErrorType">
            <summary>
            Enum ErrorType, define the application error when in runtime.
            </summary>
        </member>
        <member name="P:Gyp.Race.API.ApiError.Errors">
            <summary>
            IEnumerable with notification error detail from application
            </summary>
        </member>
        <member name="M:Gyp.Race.API.ApiError.FromResult(Gyp.Race.Application.Result)">
            <summary>
            Convert a object result to ApiError Class Object Type
            </summary>
            <param name="result">Result from UseCase Process</param>
            <returns></returns>
        </member>
        <member name="T:Gyp.Race.API.Controllers.BasePresenter`1">
            <summary>
            Base Class to define error type from application
            </summary>
            <typeparam name="T">Generic class type associated to base class</typeparam>
        </member>
        <member name="P:Gyp.Race.API.Controllers.BasePresenter`1.ViewModel">
            <summary>
            ViewModel is an IActionResult
            </summary>
        </member>
        <member name="M:Gyp.Race.API.Controllers.BasePresenter`1.Populate(`0)">
            <summary>
            Populate ViewModel IActionResult according to usecase process return
            </summary>
            <param name="result">Result from UseCase Process</param>
        </member>
        <member name="M:Gyp.Race.API.Controllers.BasePresenter`1.OnPopulate(`0)">
            <summary>
            Abstract method OnOpPulate to be override in presenter layer
            </summary>
            <param name="result">Result that define a return from UseCase process</param>
        </member>
        <member name="T:Gyp.Race.API.Startup">
            <summary>
            Entry point of the application, help configure the environment AspNet.Core
            </summary>
        </member>
        <member name="M:Gyp.Race.API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Startup class constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="P:Gyp.Race.API.Startup.Configuration">
            <summary>
            Represents a set of key/value application configuration properties
            </summary>
        </member>
        <member name="M:Gyp.Race.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure startup services
            </summary>
            <param name="services">Specifies the contract for a collection of service descriptors</param>
        </member>
        <member name="M:Gyp.Race.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Implement  initial configurations
            </summary>
            <param name="app">Define a class that provides the mechanisms to configure an application's request pipeline</param>
            <param name="env"></param>
        </member>
    </members>
</doc>
